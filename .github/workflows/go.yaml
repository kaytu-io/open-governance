# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  workflow_dispatch:
    inputs:
      servicesList:
        type: string
        description: 'List of services to build'
        required: false
        default: ''
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: golang
    outputs:
        steampipe: ${{ steps.build_services.outputs.steampipe }}
        auth-service: ${{ steps.build_services.outputs.auth-service }}
        checkup-worker: ${{ steps.build_services.outputs.checkup-worker }}
        compliance-report-worker: ${{ steps.build_services.outputs.compliance-report-worker }}
        compliance-service: ${{ steps.build_services.outputs.compliance-service }}
        describe-scheduler: ${{ steps.build_services.outputs.describe-scheduler }}
        hopper: ${{ steps.build_services.outputs.hopper }}
        reporter: ${{ steps.build_services.outputs.reporter }}
        insight-worker: ${{ steps.build_services.outputs.insight-worker }}
        inventory-service: ${{ steps.build_services.outputs.inventory-service }}
        metadata-service: ${{ steps.build_services.outputs.metadata-service }}
        migrator-worker: ${{ steps.build_services.outputs.migrator-worker }}
        onboard-service: ${{ steps.build_services.outputs.onboard-service }}
        summarizer-worker: ${{ steps.build_services.outputs.summarizer-worker }}
        swagger-ui: ${{ steps.build_services.outputs.swagger-ui }}
        workspace-service: ${{ steps.build_services.outputs.workspace-service }}
    env:
      SERVICE_LIST: ${{ github.event.inputs.servicesList }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
    steps:
    - name: Install musl cc
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: musl-tools musl-dev musl
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: './go.mod'
        cache: false
    - name: Go Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - run: git config --global url.https://$GH_ACCESS_TOKEN@github.com/kaytu-io.insteadOf https://github.com/kaytu-io
    - name: Build services
      id: build_services
      run: |
        ./scripts/list_services > ./services
        cat ./services
        cat ./services | grep -v "steampipe" | grep -v "redoc" > ./build_services
        if [ ! -z "$(cat ./build_services)" ]; then
          cat ./build_services | xargs -P 1 -I{} bash -c "CC=/usr/bin/musl-gcc GOPRIVATE=\"github.com/kaytu-io\" GOOS=linux GOARCH=amd64 go build -v -ldflags \"-linkmode external -extldflags '-static' -s -w\" -tags musl -o ./build/ ./cmd/{}"
        fi
        for f in $(cat ./services); do echo "$f=true" >> "$GITHUB_OUTPUT"; done
        chmod +x ./build/*
    - name: Pack build
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      run: |
        tar -cvf build.tar build
    - name: Upload artifact
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: build.tar
        retention-days: 1
  tag:
    runs-on: ubuntu-latest
    needs:
      - build
    environment: golang
    outputs:
        latest_tag: ${{ steps.set_latest_tag.outputs.latest_tag }}
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Tag version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GH_ACCESS_TOKEN }}
          release_branches: main
          tag_prefix: v
      - name: Set latest tag output
        id: set_latest_tag
        run: |
          if [[ -z "${{ steps.tag_version.outputs.new_tag }}" ]]; then
            echo "latest_tag=${{ steps.tag_version.outputs.new_tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "latest_tag=${{ steps.tag_version.outputs.previous_tag }}" >> "$GITHUB_OUTPUT"
          fi
  deploy-steampipe:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.steampipe == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: build
        path: .
    - name: Unpack artifact
      run: |
        tar -xvf build.tar
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - uses: docker/login-action@v2
      with:
        registry: ${{ vars.DOCKER_REGISTRY }}
    - name: Build and push Docker images
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: ${{ vars.DOCKER_REGISTRY }}/steampipe-service:${{ needs.tag.outputs.latest_tag }}
        file: docker/SteampipeServiceDockerfile
        build-args: |
          PLUGIN_REGISTRY=${{ vars.DOCKER_REGISTRY }}
        context: .
  deploy-auth-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.auth-service == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/auth-service:${{ needs.tag.outputs.latest_tag }}
          file: docker/AuthServiceDockerfile
          context: .
  deploy-checkup-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.checkup-worker == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/checkup-worker:${{ needs.tag.outputs.latest_tag }}
          file: docker/CheckupWorkerDockerfile
          context: .
  deploy-compliance-report-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.compliance-report-worker == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/compliance-report-worker:${{ needs.tag.outputs.latest_tag }}
          file: docker/ComplianceReportWorkerDockerfile
          build-args: |
            PLUGIN_REGISTRY=${{ vars.DOCKER_REGISTRY }}
          context: .
  deploy-compliance-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.compliance-service == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/compliance-service:${{ needs.tag.outputs.latest_tag }}
          file: docker/ComplianceServiceDockerfile
          context: .
  deploy-describe-scheduler:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.describe-scheduler == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/describe-scheduler:${{ needs.tag.outputs.latest_tag }}
          file: docker/DescribeSchedulerDockerfile
          context: .
  deploy-hopper:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.hopper == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/hopper:${{ needs.tag.outputs.latest_tag }}
          file: docker/HopperDockerfile
          context: .
  deploy-reporter:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.reporter == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/reporter:${{ needs.tag.outputs.latest_tag }}
          file: docker/ReporterDockerfile
          context: .
  deploy-insight-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.insight-worker == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/insight-worker:${{ needs.tag.outputs.latest_tag }}
          file: docker/InsightWorkerDockerfile
          context: .
  deploy-inventory-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.inventory-service == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/inventory-service:${{ needs.tag.outputs.latest_tag }}
          file: docker/InventoryServiceDockerfile
          context: .
  deploy-metadata-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.metadata-service == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/metadata-service:${{ needs.tag.outputs.latest_tag }}
          file: docker/MetadataServiceDockerfile
          context: .
  deploy-migrator-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.migrator-worker == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/migrator:${{ needs.tag.outputs.latest_tag }}
          file: docker/MigratorDockerfile
          context: .
  deploy-onboard-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.onboard-service == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/onboard-service:${{ needs.tag.outputs.latest_tag }}
          file: docker/OnboardServiceDockerfile
          context: .
  deploy-summarizer-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.summarizer-worker == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/summarizer-worker:${{ needs.tag.outputs.latest_tag }}
          file: docker/SummarizerWorkerDockerfile
          context: .
  deploy-swagger-ui-and-redoc:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.swagger-ui == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images - swagger-ui
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/swagger-ui:${{ needs.tag.outputs.latest_tag }}
          file: docker/SwaggerUIDockerfile
          context: .
      - name: Build and push Docker images - redoc
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/redoc:${{ needs.tag.outputs.latest_tag }}
          file: docker/RedocDockerfile
          context: .
  deploy-workspace-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      id-token: write
      contents: read
    environment: docker
    if: needs.build.outputs.workspace-service == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      - name: Unpack artifact
        run: |
          tar -xvf build.tar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/workspace-service:${{ needs.tag.outputs.latest_tag }}
          file: docker/WorkspaceServiceDockerfile
          context: .
